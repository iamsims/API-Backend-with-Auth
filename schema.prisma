// database
datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

// generator
generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

// data models 
model api_keys {
  key             String  @id @db.VarChar
  expiration_date BigInt?
  user_id         Int?
  name            String? @db.VarChar
  created         BigInt?
  users           users?  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model blacklist {
  token String @id @db.VarChar(200)
}

model users {
  id              Int               @id @default(autoincrement())
  identifier      String?           @db.VarChar
  email           String?           @db.VarChar
  hashed_pw       String?           @db.VarChar
  provider        String?           @db.VarChar
  api_keys        api_keys[]
  image           String?           @db.VarChar
  user_identities user_identities[]
  credit_tracking credit_tracking?
  credit_purchase credit_purchase[]

  @@index([id], map: "ix_users_id")
}

model user_identities {
  id            Int    @id @default(autoincrement())
  user_id       Int
  provider      String
  provider_id   String
  provider_data Json
  users         users? @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model credit_purchase {
  id              Int     @id @default(autoincrement())
  user_id         Int
  credit_amount   Int
  created_date    BigInt?
  payment_method  String? @db.VarChar
  payment_details Json?
  users           users?  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model credit_tracking {
  user_id Int    @id
  credit  Int
  users   users? @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
